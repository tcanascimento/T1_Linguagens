/*
 * generated by Xtext 2.12.0
 */
grammar PsiInternalT1;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.xtext.example.mydsl.idea.lang.T1ElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.xtext.example.mydsl.services.T1GrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected T1GrammarAccess grammarAccess;

	protected T1ElementTypeProvider elementTypeProvider;

	public PsiInternalT1Parser(PsiBuilder builder, TokenStream input, T1ElementTypeProvider elementTypeProvider, T1GrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
		this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [Boolean current=false]
:
	(
		(
			{
				markComposite(elementTypeProvider.getModel_VarsVarParserRuleCall_0ElementType());
			}
			lv_vars_0_0=ruleVar
			{
				doneComposite();
				if(!$current) {
					associateWithSemanticElement();
					$current = true;
				}
			}
		)
	)*
;

//Entry rule entryRuleName
entryRuleName returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getNameElementType()); }
	iv_ruleName=ruleName
	{ $current=$iv_ruleName.current; }
	EOF;

// Rule Name
ruleName returns [Boolean current=false]
:
	{
		markLeaf(elementTypeProvider.getName_IDTerminalRuleCallElementType());
	}
	this_ID_0=RULE_ID
	{
		doneLeaf(this_ID_0);
	}
;

//Entry rule entryRuleValue
entryRuleValue returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getValueElementType()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getValue_IDTerminalRuleCall_0ElementType());
		}
		this_ID_0=RULE_ID
		{
			doneLeaf(this_ID_0);
		}
		    |
		{
			markLeaf(elementTypeProvider.getValue_STRINGTerminalRuleCall_1ElementType());
		}
		this_STRING_1=RULE_STRING
		{
			doneLeaf(this_STRING_1);
		}
		    |
		{
			markLeaf(elementTypeProvider.getValue_INTTerminalRuleCall_2ElementType());
		}
		this_INT_2=RULE_INT
		{
			doneLeaf(this_INT_2);
		}
		    |
		(
			(
				{
					markLeaf(elementTypeProvider.getValue_INTTerminalRuleCall_3_0ElementType());
				}
				this_INT_3=RULE_INT
				{
					doneLeaf(this_INT_3);
				}
			)?
			{
				markLeaf(elementTypeProvider.getValue_FullStopKeyword_3_1ElementType());
			}
			kw='.'
			{
				doneLeaf(kw);
			}
			(
				{
					markLeaf(elementTypeProvider.getValue_INTTerminalRuleCall_3_2ElementType());
				}
				this_INT_5=RULE_INT
				{
					doneLeaf(this_INT_5);
				}
			)*
		)
	)
;

//Entry rule entryRuleAttribution
entryRuleAttribution returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getAttributionElementType()); }
	iv_ruleAttribution=ruleAttribution
	{ $current=$iv_ruleAttribution.current; }
	EOF;

// Rule Attribution
ruleAttribution returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getAttribution_EqualsSignKeyword_0ElementType());
		}
		kw='='
		{
			doneLeaf(kw);
		}
		{
			markComposite(elementTypeProvider.getAttribution_ValueParserRuleCall_1ElementType());
		}
		ruleValue
		{
			doneComposite();
		}
	)*
;

//Entry rule entryRuleDeclaration
entryRuleDeclaration returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getDeclarationElementType()); }
	iv_ruleDeclaration=ruleDeclaration
	{ $current=$iv_ruleDeclaration.current; }
	EOF;

// Rule Declaration
ruleDeclaration returns [Boolean current=false]
:
	(
		{
			markComposite(elementTypeProvider.getDeclaration_NameParserRuleCall_0ElementType());
		}
		ruleName
		{
			doneComposite();
		}
		{
			markComposite(elementTypeProvider.getDeclaration_AttributionParserRuleCall_1ElementType());
		}
		ruleAttribution
		{
			doneComposite();
		}
	)
;

//Entry rule entryRuleVar
entryRuleVar returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getVarElementType()); }
	iv_ruleVar=ruleVar
	{ $current=$iv_ruleVar.current; }
	EOF;

// Rule Var
ruleVar returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getVar_VarKeyword_0ElementType());
		}
		otherlv_0='var'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getVar_DeclarationsDeclarationParserRuleCall_1_0ElementType());
				}
				lv_declarations_1_0=ruleDeclaration
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		(
			{
				markLeaf(elementTypeProvider.getVar_CommaKeyword_2_0ElementType());
			}
			otherlv_2=','
			{
				doneLeaf(otherlv_2);
			}
			(
				(
					{
						markComposite(elementTypeProvider.getVar_DeclarationsDeclarationParserRuleCall_2_1_0ElementType());
					}
					lv_declarations_3_0=ruleDeclaration
					{
						doneComposite();
						if(!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
				)
			)
		)*
		(
			{
				markLeaf(elementTypeProvider.getVar_SemicolonKeyword_3ElementType());
			}
			otherlv_4=';'
			{
				doneLeaf(otherlv_4);
			}
		)?
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
