/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.xtext.example.mydsl.t1.Model

@RunWith(XtextRunner)
@InjectWith(T1InjectorProvider)
class T1ParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
	@Test
	def void validaAtribuicaoComSubtracao() {
		val result = parseHelper.parse('''
			var a = 1 - 2;
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void validaAtribuicaoComSubtracaoFloat() {
		val result = parseHelper.parse('''
			var a = 1 - 3.2121;
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void validaAtribuicaoComSoma() {
		val result = parseHelper.parse('''
			var a = 1 + 2;
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void validaAtribuicaoComSomaFloat() {
		val result = parseHelper.parse('''
			var a = 1 + 2.2121;
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void validaVarFloatSemValorEsquerdaSoma() {
		val result = parseHelper.parse('''
			var a = .12312312312 + 111;
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void validaAtribuicaoComum() {
		val result = parseHelper.parse('''
			var a = b;
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void vaidaAtribuicaoComposta() {
		val result = parseHelper.parse('''
			var a = 0, b = 2;
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void validaVarSemPontoVirgula() {
		val result = parseHelper.parse('''
			var a = c
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void validaVarAspasSimples() {
		val result = parseHelper.parse('''
			var a = '123**&Ë†';
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void validaVarAspasDuplas() {
		val result = parseHelper.parse('''
			var a = "''"
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void validaVarSemAtribuicao() {
		val result = parseHelper.parse('''
			var a
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void validaVarSemAtribuicaoComVirgula() {
		val result = parseHelper.parse('''
			var a;
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void validaVarAtribuicaoNumero() {
		val result = parseHelper.parse('''
			var a = 12312312312.122;
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void validaVarFloatSemDefinicaoCasaDecimal() {
		val result = parseHelper.parse('''
			var a = 12312312312.;
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void validaVarDuplamenteComposta() {
		val result = parseHelper.parse('''
			var a, b = a = 'A';
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	
	@Test
	def void validaVarFloatSemValorEsquerda() {
		val result = parseHelper.parse('''
			var a = .12312312312
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void validaVarInicioNumero(){
		val result = parseHelper.parse('''
			var 12311  = a;
		''')
		Assert.assertNotNull(result)
		Assert.assertFalse(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void validaVarInicioCaracter(){
		val result = parseHelper.parse('''
			var &asa12  = 12;
		''')
		Assert.assertNotNull(result)
		Assert.assertFalse(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void validaVarCaracterEspecial(){
		val result = parseHelper.parse('''
			var varC7123123  = *****;
		''')
		Assert.assertNotNull(result)
		Assert.assertFalse(result.eResource.errors.isEmpty)
	}
}
