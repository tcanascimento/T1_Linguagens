/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class T1GrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.T1.Model");
		private final Assignment cVarsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarsVarParserRuleCall_0 = (RuleCall)cVarsAssignment.eContents().get(0);
		
		//Model:
		//	vars+=Var*;
		@Override public ParserRule getRule() { return rule; }
		
		//vars+=Var*
		public Assignment getVarsAssignment() { return cVarsAssignment; }
		
		//Var
		public RuleCall getVarsVarParserRuleCall_0() { return cVarsVarParserRuleCall_0; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.T1.Name");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Name:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.T1.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cFullStopKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cPlusSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cINTTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cPlusSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final Keyword cFullStopKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_5_4 = (RuleCall)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cINTTerminalRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cPlusSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_6_2 = (RuleCall)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cINTTerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final RuleCall cINTTerminalRuleCall_8_0 = (RuleCall)cGroup_8.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_8_2 = (RuleCall)cGroup_8.eContents().get(2);
		private final Keyword cFullStopKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_8_4 = (RuleCall)cGroup_8.eContents().get(4);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final RuleCall cINTTerminalRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_9_2 = (RuleCall)cGroup_9.eContents().get(2);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final RuleCall cINTTerminalRuleCall_10_0 = (RuleCall)cGroup_10.eContents().get(0);
		private final Keyword cFullStopKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_10_2 = (RuleCall)cGroup_10.eContents().get(2);
		private final Keyword cPlusSignKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_10_4 = (RuleCall)cGroup_10.eContents().get(4);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Keyword cHyphenMinusKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_11_1 = (RuleCall)cGroup_11.eContents().get(1);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Keyword cHyphenMinusKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_12_1 = (RuleCall)cGroup_12.eContents().get(1);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Keyword cHyphenMinusKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_13_1 = (RuleCall)cGroup_13.eContents().get(1);
		private final Keyword cPlusSignKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Keyword cFullStopKeyword_13_3 = (Keyword)cGroup_13.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_13_4 = (RuleCall)cGroup_13.eContents().get(4);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Keyword cHyphenMinusKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_14_1 = (RuleCall)cGroup_14.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_14_2 = (Keyword)cGroup_14.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_14_3 = (RuleCall)cGroup_14.eContents().get(3);
		private final Keyword cFullStopKeyword_14_4 = (Keyword)cGroup_14.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_14_5 = (RuleCall)cGroup_14.eContents().get(5);
		
		//Value:
		//	ID | STRING | INT | INT? '.' INT* | INT '+' INT | INT '+' INT? '.' INT* | INT '+' INT* | INT '-' INT | INT '-' INT?
		//	'.' INT* | INT '-' INT* | INT? '.' INT* '+' INT | '-' INT* | ('-' INT)* | '-' INT* '+' '.'? INT* | '-' INT '-' INT?
		//	'.' INT*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | STRING | INT | INT? '.' INT* | INT '+' INT | INT '+' INT? '.' INT* | INT '+' INT* | INT '-' INT | INT '-' INT? '.'
		//INT* | INT '-' INT* | INT? '.' INT* '+' INT | '-' INT* | ('-' INT)* | '-' INT* '+' '.'? INT* | '-' INT '-' INT? '.'
		//INT*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//INT? '.' INT*
		public Group getGroup_3() { return cGroup_3; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_3_0() { return cINTTerminalRuleCall_3_0; }
		
		//'.'
		public Keyword getFullStopKeyword_3_1() { return cFullStopKeyword_3_1; }
		
		//INT*
		public RuleCall getINTTerminalRuleCall_3_2() { return cINTTerminalRuleCall_3_2; }
		
		//INT '+' INT
		public Group getGroup_4() { return cGroup_4; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_0() { return cINTTerminalRuleCall_4_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_4_1() { return cPlusSignKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
		
		//INT '+' INT? '.' INT*
		public Group getGroup_5() { return cGroup_5; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_5_0() { return cINTTerminalRuleCall_5_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_5_1() { return cPlusSignKeyword_5_1; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_5_2() { return cINTTerminalRuleCall_5_2; }
		
		//'.'
		public Keyword getFullStopKeyword_5_3() { return cFullStopKeyword_5_3; }
		
		//INT*
		public RuleCall getINTTerminalRuleCall_5_4() { return cINTTerminalRuleCall_5_4; }
		
		//INT '+' INT*
		public Group getGroup_6() { return cGroup_6; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_6_0() { return cINTTerminalRuleCall_6_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_6_1() { return cPlusSignKeyword_6_1; }
		
		//INT*
		public RuleCall getINTTerminalRuleCall_6_2() { return cINTTerminalRuleCall_6_2; }
		
		//INT '-' INT
		public Group getGroup_7() { return cGroup_7; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_7_0() { return cINTTerminalRuleCall_7_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_7_1() { return cHyphenMinusKeyword_7_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_7_2() { return cINTTerminalRuleCall_7_2; }
		
		//INT '-' INT? '.' INT*
		public Group getGroup_8() { return cGroup_8; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_8_0() { return cINTTerminalRuleCall_8_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_8_1() { return cHyphenMinusKeyword_8_1; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_8_2() { return cINTTerminalRuleCall_8_2; }
		
		//'.'
		public Keyword getFullStopKeyword_8_3() { return cFullStopKeyword_8_3; }
		
		//INT*
		public RuleCall getINTTerminalRuleCall_8_4() { return cINTTerminalRuleCall_8_4; }
		
		//INT '-' INT*
		public Group getGroup_9() { return cGroup_9; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_9_0() { return cINTTerminalRuleCall_9_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_9_1() { return cHyphenMinusKeyword_9_1; }
		
		//INT*
		public RuleCall getINTTerminalRuleCall_9_2() { return cINTTerminalRuleCall_9_2; }
		
		//INT? '.' INT* '+' INT
		public Group getGroup_10() { return cGroup_10; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_10_0() { return cINTTerminalRuleCall_10_0; }
		
		//'.'
		public Keyword getFullStopKeyword_10_1() { return cFullStopKeyword_10_1; }
		
		//INT*
		public RuleCall getINTTerminalRuleCall_10_2() { return cINTTerminalRuleCall_10_2; }
		
		//'+'
		public Keyword getPlusSignKeyword_10_3() { return cPlusSignKeyword_10_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_10_4() { return cINTTerminalRuleCall_10_4; }
		
		//'-' INT*
		public Group getGroup_11() { return cGroup_11; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_11_0() { return cHyphenMinusKeyword_11_0; }
		
		//INT*
		public RuleCall getINTTerminalRuleCall_11_1() { return cINTTerminalRuleCall_11_1; }
		
		//('-' INT)*
		public Group getGroup_12() { return cGroup_12; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_12_0() { return cHyphenMinusKeyword_12_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_12_1() { return cINTTerminalRuleCall_12_1; }
		
		//'-' INT* '+' '.'? INT*
		public Group getGroup_13() { return cGroup_13; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_13_0() { return cHyphenMinusKeyword_13_0; }
		
		//INT*
		public RuleCall getINTTerminalRuleCall_13_1() { return cINTTerminalRuleCall_13_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_13_2() { return cPlusSignKeyword_13_2; }
		
		//'.'?
		public Keyword getFullStopKeyword_13_3() { return cFullStopKeyword_13_3; }
		
		//INT*
		public RuleCall getINTTerminalRuleCall_13_4() { return cINTTerminalRuleCall_13_4; }
		
		//'-' INT '-' INT? '.' INT*
		public Group getGroup_14() { return cGroup_14; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_14_0() { return cHyphenMinusKeyword_14_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_14_1() { return cINTTerminalRuleCall_14_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_14_2() { return cHyphenMinusKeyword_14_2; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_14_3() { return cINTTerminalRuleCall_14_3; }
		
		//'.'
		public Keyword getFullStopKeyword_14_4() { return cFullStopKeyword_14_4; }
		
		//INT*
		public RuleCall getINTTerminalRuleCall_14_5() { return cINTTerminalRuleCall_14_5; }
	}
	public class AttributionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.T1.Attribution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cValueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Attribution:
		//	('=' Value)*;
		@Override public ParserRule getRule() { return rule; }
		
		//('=' Value)*
		public Group getGroup() { return cGroup; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//Value
		public RuleCall getValueParserRuleCall_1() { return cValueParserRuleCall_1; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.T1.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAttributionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Declaration:
		//	Name Attribution;
		@Override public ParserRule getRule() { return rule; }
		
		//Name Attribution
		public Group getGroup() { return cGroup; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//Attribution
		public RuleCall getAttributionParserRuleCall_1() { return cAttributionParserRuleCall_1; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.T1.Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDeclarationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_2_1_0 = (RuleCall)cDeclarationsAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Var:
		//	'var' declarations+=Declaration (',' declarations+=Declaration)* ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' declarations+=Declaration (',' declarations+=Declaration)* ';'?
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//declarations+=Declaration
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_1_0() { return cDeclarationsDeclarationParserRuleCall_1_0; }
		
		//(',' declarations+=Declaration)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//declarations+=Declaration
		public Assignment getDeclarationsAssignment_2_1() { return cDeclarationsAssignment_2_1; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_2_1_0() { return cDeclarationsDeclarationParserRuleCall_2_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	
	
	private final ModelElements pModel;
	private final NameElements pName;
	private final ValueElements pValue;
	private final AttributionElements pAttribution;
	private final DeclarationElements pDeclaration;
	private final VarElements pVar;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public T1GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pName = new NameElements();
		this.pValue = new ValueElements();
		this.pAttribution = new AttributionElements();
		this.pDeclaration = new DeclarationElements();
		this.pVar = new VarElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.T1".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	vars+=Var*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Name:
	//	ID;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//Value:
	//	ID | STRING | INT | INT? '.' INT* | INT '+' INT | INT '+' INT? '.' INT* | INT '+' INT* | INT '-' INT | INT '-' INT?
	//	'.' INT* | INT '-' INT* | INT? '.' INT* '+' INT | '-' INT* | ('-' INT)* | '-' INT* '+' '.'? INT* | '-' INT '-' INT?
	//	'.' INT*;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Attribution:
	//	('=' Value)*;
	public AttributionElements getAttributionAccess() {
		return pAttribution;
	}
	
	public ParserRule getAttributionRule() {
		return getAttributionAccess().getRule();
	}
	
	//Declaration:
	//	Name Attribution;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Var:
	//	'var' declarations+=Declaration (',' declarations+=Declaration)* ';'?;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
